# coding: utf-8

"""
    MBTA

    MBTA service API. https://www.mbta.com  # noqa: E501

    OpenAPI spec version: 3.0
    Contact: developer@mbta.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.schedule_resource_relationships_prediction import ScheduleResourceRelationshipsPrediction  # noqa: F401,E501
from swagger_client.models.schedule_resource_relationships_route import ScheduleResourceRelationshipsRoute  # noqa: F401,E501
from swagger_client.models.schedule_resource_relationships_stop import ScheduleResourceRelationshipsStop  # noqa: F401,E501
from swagger_client.models.schedule_resource_relationships_trip import ScheduleResourceRelationshipsTrip  # noqa: F401,E501


class ScheduleResourceRelationships(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'trip': 'ScheduleResourceRelationshipsTrip',
        'stop': 'ScheduleResourceRelationshipsStop',
        'route': 'ScheduleResourceRelationshipsRoute',
        'prediction': 'ScheduleResourceRelationshipsPrediction'
    }

    attribute_map = {
        'trip': 'trip',
        'stop': 'stop',
        'route': 'route',
        'prediction': 'prediction'
    }

    def __init__(self, trip=None, stop=None, route=None, prediction=None):  # noqa: E501
        """ScheduleResourceRelationships - a model defined in Swagger"""  # noqa: E501

        self._trip = None
        self._stop = None
        self._route = None
        self._prediction = None
        self.discriminator = None

        if trip is not None:
            self.trip = trip
        if stop is not None:
            self.stop = stop
        if route is not None:
            self.route = route
        if prediction is not None:
            self.prediction = prediction

    @property
    def trip(self):
        """Gets the trip of this ScheduleResourceRelationships.  # noqa: E501


        :return: The trip of this ScheduleResourceRelationships.  # noqa: E501
        :rtype: ScheduleResourceRelationshipsTrip
        """
        return self._trip

    @trip.setter
    def trip(self, trip):
        """Sets the trip of this ScheduleResourceRelationships.


        :param trip: The trip of this ScheduleResourceRelationships.  # noqa: E501
        :type: ScheduleResourceRelationshipsTrip
        """

        self._trip = trip

    @property
    def stop(self):
        """Gets the stop of this ScheduleResourceRelationships.  # noqa: E501


        :return: The stop of this ScheduleResourceRelationships.  # noqa: E501
        :rtype: ScheduleResourceRelationshipsStop
        """
        return self._stop

    @stop.setter
    def stop(self, stop):
        """Sets the stop of this ScheduleResourceRelationships.


        :param stop: The stop of this ScheduleResourceRelationships.  # noqa: E501
        :type: ScheduleResourceRelationshipsStop
        """

        self._stop = stop

    @property
    def route(self):
        """Gets the route of this ScheduleResourceRelationships.  # noqa: E501


        :return: The route of this ScheduleResourceRelationships.  # noqa: E501
        :rtype: ScheduleResourceRelationshipsRoute
        """
        return self._route

    @route.setter
    def route(self, route):
        """Sets the route of this ScheduleResourceRelationships.


        :param route: The route of this ScheduleResourceRelationships.  # noqa: E501
        :type: ScheduleResourceRelationshipsRoute
        """

        self._route = route

    @property
    def prediction(self):
        """Gets the prediction of this ScheduleResourceRelationships.  # noqa: E501


        :return: The prediction of this ScheduleResourceRelationships.  # noqa: E501
        :rtype: ScheduleResourceRelationshipsPrediction
        """
        return self._prediction

    @prediction.setter
    def prediction(self, prediction):
        """Sets the prediction of this ScheduleResourceRelationships.


        :param prediction: The prediction of this ScheduleResourceRelationships.  # noqa: E501
        :type: ScheduleResourceRelationshipsPrediction
        """

        self._prediction = prediction

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ScheduleResourceRelationships):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
